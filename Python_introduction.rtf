{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang16393{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil\fcharset1 Segoe UI Symbol;}{\f3\fnil Calibri;}{\f4\fnil\fcharset1 Cambria Math;}{\f5\fnil\fcharset2 Symbol;}}
{\*\generator Riched20 10.0.19041}{\*\mmathPr\mmathFont4\mwrapIndent1440 }\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9                                                           \par
\b What is Python?\par
\b0 Python is a programming language that makes coding simple and easy to understand. It\rquote s popular because of its clean syntax, which looks almost like English, making it beginner-friendly. \par
Created by Guido van Rossum in 1991, Python is used worldwide for building software, automating tasks, analyzing data, and much more.\par
the latest Python versions are: \par
3.13.2: Released on February 4, 2025\par
3.12.9: Released on February 4, 2025\par
\b Why Do We Use Python?\par
\b0 Python is used because:\par
\f1\u9989?\f0  It has a simple and easy-to-learn syntax.\par
\f1\u9989?\f0  It is highly readable and requires fewer lines of code.\par
\f1\u9989?\f0  It has a large and active community.\par
\f1\u9989?\f0  It supports multiple programming paradigms (procedural, object-oriented, and functional).\par
\f1\u9989?\f0  It has a vast collection of libraries and frameworks for various applications.\par
\par
\b Uses of Python\par
\b0 Python is used in multiple domains, such as:\par
\f2\u-10179?\u-8903?\f0  Web Development \f3\endash  Django, Flask, FastAPI\par
\f2\u-10179?\u-8903?\f0  Data Science & Analytics \f3\endash  Pandas, NumPy, Matplotlib\par
\f2\u-10179?\u-8903?\f0  Machine Learning & AI \f3\endash  TensorFlow, PyTorch, Scikit-learn\par
\f2\u-10179?\u-8903?\f0  Automation & Scripting \f3\endash  Automating tasks, web scraping (BeautifulSoup, Selenium)\par
\f2\u-10179?\u-8903?\f0  Game Development \f3\endash  Pygame\par
\f2\u-10179?\u-8903?\f0  Cybersecurity \f3\endash  Ethical hacking, penetration testing\par
\f2\u-10179?\u-8903?\f0  Embedded Systems & IoT \f3\endash  Raspberry Pi projects\par
\f2\u-10179?\u-8903?\f0  Finance & Trading \f3\endash  Algorithmic trading, stock market analysis\par
\par
\b Applications of Python\f0\lang16393 :\f3\lang9\par
\b0 Python is used in various real-world applications, such as:\par
\f2\u-10179?\u-9012?\f0  Google & YouTube \f3\endash  Google uses Python extensively, and YouTube\rquote s backend is powered by Python.\par
\f2\u-10179?\u-9012?\f0  Instagram \f3\endash  Built using Django (a Python web framework).\par
\f2\u-10179?\u-9012?\f0  Netflix & Spotify \f3\endash  Use Python for data analytics and recommendations.\par
\f2\u-10179?\u-9012?\f0  Self-driving Cars \f3\endash  Tesla and other companies use Python in AI models.\par
\f2\u-10179?\u-9012?\f0  NASA & Space Research \f3\endash  Python is used for data analysis and simulations.\par
\f2\u-10179?\u-9012?\f0  Blockchain & Cryptocurrency \f3\endash  Smart contracts and blockchain analysis tools.\par
\b\f0\lang16393 Fundemental conceepts in Python:\par
.Python Basics:-\par

\pard{\pntext\f5\'B7\tab}{\*\pn\pnlvlblt\pnf5\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\b0 Python is an interpreted, high-level, and dynamically typed language.\par
{\pntext\f5\'B7\tab}It uses indentation instead of curly braces \{\} to define code blocks.\par
{\pntext\f5\'B7\tab}Python files have a .py extension.\f3\lang9\par

\pard\sa200\sl276\slmult1\b\f0\lang16393 Comments in Python\b0\par
Comments in Python are used to explain code and make it more readable. They are ignored by the Python interpreter and do not affect the program execution.\par
Uses the # symbol and is written on one line.\f3\lang9\par
Why Use Comments?\par
\f1\u9989?\f0  Makes code easier to understand\par
\f1\u9989?\f0  Helps in debugging\par
\f1\u9989?\f0  Useful for documenting functions and classes\par
\f1\u9989?\f0  Helps other developers work with your code\par
\b What Are Variables in Python?\par
\b0 Think of a variable like a box where you store information. Each box has a name (variable name) and contains data (value). You can use that name later to access or change the stored data.\par
\par
For example, \par
age = 25\par
Here,  age is the variable (the box).\par
25 is the value stored inside it.\par
Why Do We Use Variables?\par
\f1\u9989?\f0  To store data for later use.\par
\f1\u9989?\f0  To make code reusable and easy to update.\par
\f1\u9989?\f0  To make programs dynamic (work with different values).\par
\par
Rules for Naming Variables\par
\f1\u10004?\f0  Must start with a letter (A-Z or a-z) or an underscore _ (e.g., _name).\par
\f1\u10004?\f0  Cannot start with a number (e.g., 1name \f1\u10060?\f0 ).\par
\f1\u10004?\f0  Can only contain letters, numbers, and underscores (e.g., user_name123).\par
\f1\u10004?\f0  Case-sensitive (name and Name are different).\par
\f1\u10004?\f0  Cannot use Python keywords like if, while, def, class.\par
\b Data Types in Python:\b0\par
A data type defines what kind of value a variable holds. Python automatically assigns a data type based on the value stored in a variable.\par
\b 1. Integer (int)\par
\b0 Used for whole numbers (positive or negative.\par
age = 25\par
temperature = -10\par
print(type(age))  output :<class 'int'>\par
2\b . Float (float)\par
\b0 Used for decimal (floating-point) numbers.\par
price = 19.99\par
height = 5.8\par
print(type(price))  # Output: <class 'float'>\par
3. \b String (str)\par
\b0 Used for text (written inside single ' ' or double " " quotes).\par
name = "Alice"\par
message = 'Hello, world!'\par
print(type(name))  # Output: <class 'str'>\par
\b 4. Boolean (bool)\par
\b0 Represents True or False values.\par
is_student = True\par
has_passed = False\par
print(type(is_student))  # Output: <class 'bool'>\par
\b 5. List (list)\par
\b0 A collection of multiple values stored in square brackets []. Lists are ordered and modifiable.\par
fruits = ["apple", "banana", "cherry"]\par
numbers = [1, 2, 3, 4, 5]\par
print(type(fruits))  # Output: <class 'list'>\par
\b 6. Tuple (tuple)\par
\b0 Similar to a list but unchangeable (immutable). Defined using parentheses ().\par
colors = ("red", "green", "blue")\par
print(type(colors))  # Output: <class 'tuple'>\par
\b 7. Dictionary (dict)\par
\b0 Stores key-value pairs inside curly braces \{\}.\par
person = \{"name": "John", "age": 30, "city": "New York"\}\par
print(type(person))  # Output: <class 'dict'>\par
\b 8. Set (set)\par
\b0 A collection of unique values (unordered, no duplicates). Defined using curly braces \{\}.\par
unique_numbers = \{1, 2, 3, 4, 4, 5\}\par
print(unique_numbers)  # Output: \{1, 2, 3, 4, 5\}\par
print(type(unique_numbers))  # Output: <class 'set'>\par
\b 9. None Type (None)\par
\b0 Represents "nothing" or "no value".\par
x = None\par
print(type(x))  # Output: <class 'NoneType'>\par

\pard\sa200\sl276\slmult1\f3 Arithmetic Operations (Used for calculations)\par
These operators perform mathematical calculations like addition, subtraction, multiplication, etc.\par
a = 10\par
b = 5\par
print(a + b)  # Addition \f4\u8594?\f0  15\par
print(a - b)  # Subtraction \f4\u8594?\f0  5\par
print(a * b)  # Multiplication \f4\u8594?\f0  50\par
print(a / b)  # Division \f4\u8594?\f0  2.0\par
print(a // b) # Floor Division \f4\u8594?\f0  2 (removes decimal)\par
print(a % b)  # Modulus (remainder) \f4\u8594?\f0  0\par
print(a ** b) # Exponentiation (power) \f4\u8594?\f0  100000\par
2. Comparison Operations (Used for comparisons)\par
These operators compare values and return True or False.\par
x = 10\par
y = 20\par
print(x == y)  # Equal to \f4\u8594?\f0  False\par
print(x != y)  # Not equal to \f4\u8594?\f0  True\par
print(x > y)   # Greater than \f4\u8594?\f0  False\par
print(x < y)   # Less than \f4\u8594?\f0  True\par
print(x >= y)  # Greater than or equal \f4\u8594?\f0  False\par
print(x <= y)  # Less than or equal \f4\u8594?\f0  True\par
3. Logical Operations (Used for decision-making)\par
Logical operators check conditions and return True or False.\par
p = True\par
q = False\par
print(p and q)  # AND \f4\u8594?\f0  False (Both must be True)\par
print(p or q)   # OR \f4\u8594?\f0  True (At least one must be True)\par
print(not p)    # NOT \f4\u8594?\f0  False (Reverses value)\par
4. Assignment Operations (Used to assign values)\par
These operators assign and update values in variables.\par
x = 5\par
x += 3  # Same as x = x + 3 \f4\u8594?\f0  x = 8\par
x -= 2  # Same as x = x - 2 \f4\u8594?\f0  x = 6\par
x *= 4  # Same as x = x * 4 \f4\u8594?\f0  x = 24\par
x /= 6  # Same as x = x / 6 \f4\u8594?\f0  x = 4.0\par
x %= 3  # Same as x = x % 3 \f4\u8594?\f0  x = 1.0\par
5. Bitwise Operations (Used for binary calculations)\par
These operators work with binary numbers (0 and 1).\par
a = 5  # Binary: 101\par
b = 3  # Binary: 011\par
print(a & b)  # AND \f4\u8594?\f0  1 (001)\par
print(a | b)  # OR \f4\u8594?\f0  7 (111)\par
print(a ^ b)  # XOR \f4\u8594?\f0  6 (110)\par
print(~a)     # NOT \f4\u8594?\f0  -6 (inverts bits)\par
print(a << 1) # Left Shift \f4\u8594?\f0  10 (1010)\par
print(a >> 1) # Right Shift \f4\u8594?\f0  2 (010)\par
6. Membership Operations (Check if a value is in a collection)\par
These operators check if a value exists in a list, tuple, set, or dictionary.\par
fruits = ["apple", "banana", "cherry"]\par
print("apple" in fruits)   # True\par
print("mango" not in fruits)  # True\par
7. Identity Operations (Check if variables point to the same object)\par
These operators compare memory locations of variables.\par
a = [1, 2, 3]\par
b = a\par
c = [1, 2, 3]\par
print(a is b)   # True (Same object)\par
print(a is c)   # False (Different objects)\par
print(a is not c)  # True\par
\par
\par
\par
\par
\par
\par
\par
\par
}
 